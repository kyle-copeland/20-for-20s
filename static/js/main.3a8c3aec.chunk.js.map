{"version":3,"sources":["logo.svg","Event.jsx","data/events.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","date","location","description","time","podcast","className","href","App","alt","src","Object","keys","events","map","month","event","key","id","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,4GCK5B,G,sBAAA,YAAmD,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAChD,OACI,wBAAIC,UAAW,SACX,yBAAKA,UAAU,eACX,wBAAIA,UAAU,cAAcL,GAC5B,uBAAGK,UAAU,cAAcF,GARtB,WAUT,yBAAKE,UAAU,cACX,uBAAGA,UAAU,qBAAqBH,GAClC,uBAAGG,UAAU,kBAAkBJ,GAXtB,kCAYRG,GAAW,uBAAGC,UAAU,gBAAgBC,KAAMF,GAAnC,eCfb,GACX,QAAW,CAAC,CACRJ,KAAM,UACNE,YAAa,0BACd,CACCF,KAAM,UACNI,QAAS,8EACV,CACCJ,KAAM,YACP,CACCA,KAAM,YACP,CACCA,KAAM,WACNC,SAAU,MACVC,YAAa,mBACbC,KAAM,QAEV,SAAY,CAAC,CACTH,KAAM,WACP,CACCA,KAAM,YACP,CACCA,KAAM,WACNC,SAAU,MACVC,YAAa,iBACbC,KAAM,QAEV,SAAY,CAAC,CACTH,KAAM,WACP,CACCA,KAAM,YACN,CACAA,KAAM,WACNC,SAAU,MACVC,YAAa,mBACbC,KAAM,QAEV,QAAW,CAAC,CACRH,KAAM,WACP,CACCA,KAAM,YACP,CACCA,KAAM,YACP,CACCA,KAAM,WACNC,SAAU,MACVC,YAAa,gBACbC,KAAM,QAEV,SAAY,CAAC,CACTH,KAAM,WACP,CACCA,KAAM,YACP,CACCA,KAAM,YACP,CACCA,KAAM,aAEV,MAAS,CAAC,CACNA,KAAM,UACNC,SAAU,MACVC,YAAa,wBACbC,KAAM,SCcCI,MArEf,WACE,OACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,WAAUG,IAAI,aAAaC,IAAI,eAEhD,8BACE,yBAAKJ,UAAU,SACZ,uBAAGA,UAAU,cAAb,YAAmC,0BAAMA,UAAU,eAAhB,aAAnC,OAAqF,0BAAMA,UAAU,eAAhB,WAArF,OAAqI,0BAAMA,UAAU,eAAhB,UACrI,yBAAKG,IAAI,SAASH,UAAU,cAAcI,IAAI,iBAEjD,yBAAKJ,UAAU,UACb,yBAAKA,UAAU,gBACf,uBAAGA,UAAU,eAAb,2HAAmJ,uBAAGC,KAAK,aAAR,iBAGrJ,wCACCI,OAAOC,KAAKC,GAAQC,KAAI,SAACC,GACxB,OACE,6BACE,wBAAIT,UAAU,SAASS,GACvB,wBAAIT,UAAU,UACXO,EAAOE,GAAOD,KAAI,SAAAE,GACjB,OAAO,kBAAC,EAAD,iBAAWA,EAAX,CAAkBC,IAAKD,EAAMf,gBAM9C,yBAAKK,UAAU,2BACb,yBAAKA,UAAU,gBACf,uBAAGA,UAAU,eAAb,sBAEF,yBAAKA,UAAU,WACb,wBAAIY,GAAG,YAAP,+BAEA,iIAEA,6aAEA,6DAEA,2TAEA,8VAEA,oHAEA,0DAEA,wEAEA,iDAEA,8JAEF,yBAAKZ,UAAU,0BACb,yBAAKA,UAAU,gBACf,uBAAGA,UAAU,eAAb,eACe,GADf,sCAGc,uBAAGC,KAAK,wCAAR,sCCxDJY,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a8c3aec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nconst DEFAULT_TIME = '6:30pm';\r\nconst DEFAULT_LOCATION = '26 Burning Tree, Newport Beach';\r\n\r\nexport default ({date, location, description, time, podcast}) => {\r\n    return (\r\n        <li className={'Event'}>\r\n            <div className=\"Event-start\">\r\n                <h4 className=\"Event-date\">{date}</h4>\r\n                <p className=\"Event-time\">{time || DEFAULT_TIME}</p>\r\n            </div>\r\n            <div className=\"Event-main\">\r\n                <p className=\"Event-description\">{description}</p>\r\n                <p className=\"Event-location\">{location || DEFAULT_LOCATION}</p>\r\n                {podcast && <a className=\"Event-podcast\" href={podcast}>Podcast</a>}\r\n            </div>\r\n        </li>\r\n    );\r\n}","export default {\r\n    'October': [{\r\n        date: 'Oct 1st',\r\n        description: 'Fall Session Kick-Off!',\r\n    }, {\r\n        date: 'Oct 8th',\r\n        podcast: 'https://realitycarpinteria.com/sermons/the-sermon-and-summons-of-the-king/'\r\n    }, {\r\n        date: 'Oct 15th',\r\n    }, {\r\n        date: 'Oct 22nd',\r\n    }, {\r\n        date: 'Oct 29th',\r\n        location: 'TBD',\r\n        description: 'Halloween Event!',\r\n        time: 'TBD'\r\n    }],\r\n    'November': [{\r\n        date: 'Nov 5th',\r\n    }, {\r\n        date: 'Nov 12th',\r\n    }, {\r\n        date: 'Nov 19th',\r\n        location: 'TBD',\r\n        description: 'Friendsgiving!',\r\n        time: 'TBD'\r\n    }],\r\n    'December': [{\r\n        date: 'Dec 3rd'\r\n    }, {\r\n        date: 'Dec 10th',\r\n    },  {\r\n        date: 'Dec 17th',\r\n        location: 'TBD',\r\n        description: 'Christmas Event!',\r\n        time: 'TBD'\r\n    }], \r\n    'January': [{\r\n        date: 'Jan 7th'\r\n    }, {\r\n        date: 'Jan 14th'\r\n    }, {\r\n        date: 'Jan 21st'\r\n    }, {\r\n        date: 'Jan 28th',\r\n        location: 'TBD',\r\n        description: 'Social Event!',\r\n        time: 'TBD'\r\n    }],\r\n    'February': [{\r\n        date: 'Feb 4th'\r\n    }, {\r\n        date: 'Feb 11th'\r\n    }, {\r\n        date: 'Feb 18th'\r\n    }, {\r\n        date: 'Feb 25th'\r\n    }],\r\n    'March': [{\r\n        date: 'Mar 3rd',\r\n        location: 'TBD',\r\n        description: 'End of Session Event!',\r\n        time: 'TBD'\r\n    }]\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './Event.css';\nimport Event from './Event';\nimport events from './data/events';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img className=\"App-logo\"alt=\"20 for 20s\" src=\"/logo.png\" />\n      </header>\n      <main>\n        <div className=\"Panel\">\n           <p className=\"Panel-text\">Pursuing <span className=\"u-highlight\">community</span> in <span className=\"u-highlight\">the way</span> of <span className=\"u-highlight\">Jesus</span></p>\n           <img alt=\"leaves\" className=\"Panel-image\" src=\"/leaves.jpg\"/>\n        </div>\n        <div className=\"Banner\">\n          <div className=\"Banner-fade\"></div>\n          <p className=\"Banner-text\">Our goal is to provide a context for meaningful connections around good food and thoughtful, life-giving conversations. <a href=\"#about-us\">Learn more.</a></p>\n          \n        </div>\n        <h2>Schedule</h2>\n        {Object.keys(events).map((month) => {\n          return (\n            <div>\n              <h3 className=\"Month\">{month}</h3>\n              <ul className=\"Events\">\n                {events[month].map(event => {\n                  return <Event {...event} key={event.date} />\n                })}\n            </ul>\n          </div>\n          );\n        })}\n        <div className=\"Banner Banner--about-us\">\n          <div className=\"Banner-fade\"></div>\n          <p className=\"Banner-text\">About 20 for 20's</p>\n        </div>\n        <div className=\"AboutUs\">\n          <h2 id=\"about-us\">What’s this all about?</h2>\n\n          <p>Simply put, our tagline says we’re about, “Pursuing Community in the Way of Jesus”.</p>\n\n          <p>What that means for us is that we desire to create a place and a context to gather together as young adults to explore what it means to live the “good life” properly understood. Jesus said, “I came so that they may have life and have it abundantly”.  20 for 20’s seeks to engage in a series of sincere and thoughtful discussions as we explore this ‘way’ of Jesus.</p>\n\n          <h2>What our gatherings look like</h2>\n\n          <p>Our gatherings are pretty simple. We meet in a lovely home, we gather around a table/s and enjoy a good meal together and we discuss what we’re thinking and learning about over the last week. Our discussions are based around podcasts we listen to during the week on our own time.</p>\n\n          <p>We want our gatherings to be about authentic community, that is, real conversations…honest, transparent, and a place where substantive friendships can be built and flourish.  We want to talk about the stuff of life, deal with hard questions we may have all in a safe environment as we seek to work it out together.</p>\n\n          <p>If all this sounds interesting and inviting to you, we would love for you to join us!</p>\n\n          <h2>When does this all happen?</h2>\n\n          <p>Tuesday evenings from 6:30 to around 9:00</p>\n\n          <h2 >Where do we meet?</h2>\n\n          <p>We are currently meeting in a home in Newport Beach (Big Canyon) at 26 Burning Tree, Newport Beach, CA 92660 (The Vance home).</p>\n        </div>\n        <div className=\"Banner Banner--contact\">\n          <div className=\"Banner-fade\"></div>\n          <p className=\"Banner-text\">\n            Interested? {''}\n            We'd love to have you.\n            Email us at <a href=\"mailto:20s@gracefellowshipchurch.org\">20s@gracefellowshipchurch.com</a>\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}