{"version":3,"sources":["logo.svg","Event.jsx","data/events.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","date","location","description","time","className","App","alt","src","Object","keys","events","map","month","event","key","href","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,4GCK5B,G,sBAAA,YAA0C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,KAC1C,OACI,wBAAIC,UAAW,SACX,wBAAIA,UAAU,cAAcJ,GAC5B,yBAAKI,UAAU,cACX,uBAAGA,UAAU,qBAAqBF,GAClC,uBAAGE,UAAU,kBAAkBH,GARtB,oBAQT,MAAgEE,GAT3D,cCFN,GACX,QAAW,CAAC,CACRH,KAAM,UACNE,YAAa,0BACd,CACCF,KAAM,WACP,CACCA,KAAM,YACP,CACCA,KAAM,YACP,CACCA,KAAM,WACNC,SAAU,MACVC,YAAa,mBACbC,KAAM,QAEV,SAAY,CAAC,CACTH,KAAM,WACP,CACCA,KAAM,YACP,CACCA,KAAM,WACNC,SAAU,MACVC,YAAa,iBACbC,KAAM,QAEV,SAAY,CAAC,CACTH,KAAM,WACP,CACCA,KAAM,YACN,CACAA,KAAM,WACNC,SAAU,MACVC,YAAa,mBACbC,KAAM,QAEV,QAAW,CAAC,CACRH,KAAM,WACP,CACCA,KAAM,YACP,CACCA,KAAM,YACP,CACCA,KAAM,WACNC,SAAU,MACVC,YAAa,gBACbC,KAAM,QAEV,SAAY,CAAC,CACTH,KAAM,WACP,CACCA,KAAM,YACP,CACCA,KAAM,YACP,CACCA,KAAM,aAEV,MAAS,CAAC,CACNA,KAAM,UACNC,SAAU,MACVC,YAAa,wBACbC,KAAM,SCXCE,MA3Cf,WACE,OACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,WAAUE,IAAI,aAAaC,IAAI,eAEhD,8BACE,yBAAKH,UAAU,SACZ,uBAAGA,UAAU,cAAb,YAAmC,0BAAMA,UAAU,eAAhB,aAAnC,OAAqF,0BAAMA,UAAU,eAAhB,WAArF,OAAqI,0BAAMA,UAAU,eAAhB,UACrI,yBAAKE,IAAI,SAASF,UAAU,cAAcG,IAAI,iBAEjD,yBAAKH,UAAU,UACb,yBAAKA,UAAU,gBACf,uBAAGA,UAAU,eAAb,2HAEF,wCACCI,OAAOC,KAAKC,GAAQC,KAAI,SAACC,GACxB,OACE,6BACE,4BAAKA,GACL,wBAAIR,UAAU,UACXM,EAAOE,GAAOD,KAAI,SAAAE,GACjB,OAAO,kBAAC,EAAD,iBAAWA,EAAX,CAAkBC,IAAKD,EAAMb,gBAQ9C,yBAAKI,UAAU,0BACb,yBAAKA,UAAU,gBACf,uBAAGA,UAAU,eAAb,eACe,GADf,sCAGc,uBAAGW,KAAK,wCAAR,sCC9BJC,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.978c744f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nconst DEFAULT_TIME = '6:30pm';\r\nconst DEFAULT_LOCATION = 'The Vance\\'s House';\r\n\r\nexport default ({date, location, description, time}) => {\r\n    return (\r\n        <li className={'Event'}>\r\n            <h4 className=\"Event-date\">{date}</h4>\r\n            <div className=\"Event-main\">\r\n                <p className=\"Event-description\">{description}</p>\r\n                <p className=\"Event-location\">{location || DEFAULT_LOCATION} @ {time || DEFAULT_TIME}</p>\r\n            </div>\r\n        </li>\r\n    );\r\n}","export default {\r\n    'October': [{\r\n        date: 'Oct 1st',\r\n        description: 'Fall Session Kick-Off!',\r\n    }, {\r\n        date: 'Oct 8th',\r\n    }, {\r\n        date: 'Oct 15th',\r\n    }, {\r\n        date: 'Oct 22nd',\r\n    }, {\r\n        date: 'Oct 29th',\r\n        location: 'TBD',\r\n        description: 'Halloween Event!',\r\n        time: 'TBD'\r\n    }],\r\n    'November': [{\r\n        date: 'Nov 5th',\r\n    }, {\r\n        date: 'Nov 12th',\r\n    }, {\r\n        date: 'Nov 19th',\r\n        location: 'TBD',\r\n        description: 'Friendsgiving!',\r\n        time: 'TBD'\r\n    }],\r\n    'December': [{\r\n        date: 'Dec 3rd'\r\n    }, {\r\n        date: 'Dec 10th',\r\n    },  {\r\n        date: 'Dec 17th',\r\n        location: 'TBD',\r\n        description: 'Christmas Event!',\r\n        time: 'TBD'\r\n    }], \r\n    'January': [{\r\n        date: 'Jan 7th'\r\n    }, {\r\n        date: 'Jan 14th'\r\n    }, {\r\n        date: 'Jan 21st'\r\n    }, {\r\n        date: 'Jan 28th',\r\n        location: 'TBD',\r\n        description: 'Social Event!',\r\n        time: 'TBD'\r\n    }],\r\n    'February': [{\r\n        date: 'Feb 4th'\r\n    }, {\r\n        date: 'Feb 11th'\r\n    }, {\r\n        date: 'Feb 18th'\r\n    }, {\r\n        date: 'Feb 25th'\r\n    }],\r\n    'March': [{\r\n        date: 'Mar 3rd',\r\n        location: 'TBD',\r\n        description: 'End of Session Event!',\r\n        time: 'TBD'\r\n    }]\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './Event.css';\nimport Event from './Event';\nimport events from './data/events';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img className=\"App-logo\"alt=\"20 for 20s\" src=\"/logo.png\" />\n      </header>\n      <main>\n        <div className=\"Panel\">\n           <p className=\"Panel-text\">Pursuing <span className=\"u-highlight\">community</span> in <span className=\"u-highlight\">the way</span> of <span className=\"u-highlight\">Jesus</span></p>\n           <img alt=\"leaves\" className=\"Panel-image\" src=\"/leaves.jpg\"/>\n        </div>\n        <div className=\"Banner\">\n          <div className=\"Banner-fade\"></div>\n          <p className=\"Banner-text\">Our goal is to provide a context for meaningful connections around good food and thoughtful, life-giving conversations</p>\n        </div>\n        <h2>Schedule</h2>\n        {Object.keys(events).map((month) => {\n          return (\n            <div>\n              <h3>{month}</h3>\n              <ul className=\"Events\">\n                {events[month].map(event => {\n                  return <Event {...event} key={event.date} />\n                })}\n            </ul>\n          </div>\n          );\n        })}\n        \n        \n        <div className=\"Banner Banner--contact\">\n          <div className=\"Banner-fade\"></div>\n          <p className=\"Banner-text\">\n            Interested? {''}\n            We'd love to have you.\n            Email us at <a href=\"mailto:20s@gracefellowshipchurch.org\">20s@gracefellowshipchurch.com</a>\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}